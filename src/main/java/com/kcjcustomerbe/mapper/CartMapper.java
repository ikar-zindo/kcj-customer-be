package com.kcjcustomerbe.mapper;

import com.kcjcustomerbe.dto.CartDto;
import com.kcjcustomerbe.dto.CartProductDto;
import com.kcjcustomerbe.dto.customer.CustomerDto;
import com.kcjcustomerbe.entity.Cart;
import com.kcjcustomerbe.entity.CartProduct;
import com.kcjcustomerbe.entity.Customer;
import org.mapstruct.*;

import java.util.List;

/**
 * Interface for mapping `Cart` and `CartProduct` entities to their respective DTOs and vice versa.
 * Uses MapStruct library for mapping, which generates the implementation at compile time.
 * <p>
 * Mapping is performed by matching the `source` and `target` fields as specified in each `@Mapping`.
 * <p>
 * Unmapped fields are ignored due to `unmappedTargetPolicy = ReportingPolicy.IGNORE`.
 * Mapping for null properties are ignored due to `nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE`.
 * <p>
 * This Mapper is automatically deployed by Spring, using components scanning.
 * The implementation of the methods in this interface is generated by MapStruct and should not be manually implemented.
 *
 * @author Ivan Bukrieiev
 * @see ProductMapper
 * @since v1.3.0
 */
@Mapper(componentModel = MappingConstants.ComponentModel.SPRING,
      unmappedTargetPolicy = ReportingPolicy.IGNORE,
      nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE,
      uses = {ProductMapper.class})
public interface CartMapper {

   /**
    * Mapping without {@link Customer}
    * Maps a {@link Cart} entity to a {@link CartDto}.
    *
    * @param entity The {@link Cart} entity to be mapped.
    * @return The mapped {@link CartDto}. If the source {@link Cart} entity is null, return null.
    */
   @Named("mapToCartDtoWithoutCustomer")
   @Mapping(target = "id", source = "id")
   @Mapping(target = "customerDto", ignore = true)
   @Mapping(target = "cartProductsDto", source = "cartProducts")
   CartDto mapToCartDtoWithoutCustomer(Cart entity);

   /**
    * Mapping with {@link Customer}
    * Maps a Cart entity to a {@link CartDto}.
    *
    * @param entity The {@link Cart} entity to be mapped.
    * @return The mapped {@link CartDto}. If the source {@link Cart} entity is null, return null.
    */
   @Named("mapToCartDtoWithCustomer")
   @Mapping(target = "id", source = "id")
   @Mapping(target = "customerDto", source = "customer")
   @Mapping(target = "cartProductsDto", source = "cartProducts")
   CartDto mapToCartDtoWithCustomer(Cart entity);

   /**
    * Maps a {@link Customer} entity to a {@link CustomerDto}.
    *
    * @param entity The {@link Customer} entity to be mapped.
    * @return The mapped {@link CustomerDto}. If the source {@link Customer} entity is null, return null.
    */
   @Mappings({
         @Mapping(target = "id", source = "id"),
         @Mapping(target = "firstName", source = "firstName"),
         @Mapping(target = "lastName", source = "lastName"),
         @Mapping(target = "email", source = "email"),
         @Mapping(target = "phoneNumber", source = "phoneNumber"),
         @Mapping(target = "address", source = "address"),
         @Mapping(target = "postalCode", source = "postalCode"),
         @Mapping(target = "createdAt", ignore = true),
         @Mapping(target = "updatedAt", ignore = true),
         @Mapping(target = "role", source = "role"),
         @Mapping(target = "isBlocked", source = "isBlocked"),
         @Mapping(target = "cartDto", ignore = true),
         @Mapping(target = "ordersDto", ignore = true),
         @Mapping(target = "reviewsDto", ignore = true)
   })
   CustomerDto mapTuCustomerCart(Customer entity);

   /**
    * Maps a {@link CartProduct} entity to a {@link CartProductDto}.
    *
    * @param entity The {@link CartProduct} entity to be mapped.
    * @return The mapped {@link CartProductDto}. If the source {@link CartProduct} entity is null, return null.
    */
   @Mapping(target = "id", source = "id")
   @Mapping(target = "cartDto", ignore = true)
   @Mapping(target = "productDto", source = "product")
   @Mapping(target = "quantity", source = "quantity")
   @Mapping(target = "createdAt", source = "createdAt")
   CartProductDto mapToCartProductDto(CartProduct entity);

   /**
    * Maps a {@link CartDto} to a {@link Cart} entity.
    *
    * @param dto The {@link CartDto} to be mapped.
    * @return The mapped {@link Cart} entity. If the source {@link CartDto} is null, return null.
    */
   @Named("mapToCart")
   @Mapping(target = "id", source = "id")
   @Mapping(target = "customer", ignore = true)
   @Mapping(target = "cartProducts", source = "cartProductsDto")
   Cart mapToCart(CartDto dto);

   /**
    * Maps a {@link CartProductDto} to a `CartProduct` entity.
    *
    * @param dto The {@link CartProductDto} entity to be mapped.
    * @return The mapped {@link CartProduct} entity. If the source {@link CartProductDto} is null, return null.
    */
   @Mapping(target = "id", source = "id")
   @Mapping(target = "cart", source = "cartDto")
   @Mapping(target = "product", source = "productDto")
   @Mapping(target = "quantity", source = "quantity")
   @Mapping(target = "createdAt", source = "createdAt")
   CartProduct mapToCartProduct(CartProductDto dto);

   /**
    * Maps a list of {@link CartProduct} entities to a list of @link CartProductDto}.
    *
    * @param entities The list of {@link CartProduct} entities to be mapped.
    * @return The list of mapped {@link CartProductDto}. If the source list is null or empty, return an empty list.
    */
   List<CartProductDto> mapToCartProductDtoList(List<CartProduct> entities);

   /**
    * Maps a list of {@link CartProductDto} to a list of {@link CartProduct} entities.
    *
    * @param dtos The list of {link CartProductDto} to be mapped.
    * @return The list of mapped {link CartProduct} entities. If the source list is null or empty, return an empty list.
    */
   List<CartProduct> mapToCartProductList(List<CartProductDto> dtos);

   /**
    * Updates an existing {@link Cart} entity from a {@link CartDto}.
    *
    * @param dto    The {@link CartDto} with updated information.
    * @param entity The existing {@link Cart} entity to be updated.
    */
   void updateCartFromDto(CartDto dto, @MappingTarget Cart entity);

   /**
    * Updates an existing {@link CartProduct} entity from a {@link CartProductDto}.
    *
    * @param dto    The {@link CartProductDto} with updated information.
    * @param entity The existing {@link CartProduct} entity to be updated.
    */
   void updateCartProductFromDto(CartProductDto dto, @MappingTarget CartProduct entity);
}

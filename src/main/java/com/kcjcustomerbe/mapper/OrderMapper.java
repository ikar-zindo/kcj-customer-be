package com.kcjcustomerbe.mapper;

import com.kcjcustomerbe.dto.OrderDto;
import com.kcjcustomerbe.dto.OrderProductDto;
import com.kcjcustomerbe.entity.Order;
import com.kcjcustomerbe.entity.OrderProduct;
import org.mapstruct.*;

import java.util.List;

/**
 * Interface for mapping `Order` and `OrderProduct` entities to their respective DTOs and vice versa.
 * Uses MapStruct library for mapping, which generates the implementation at compile time.
 *
 * Mapping is performed by matching the `source` and `target` fields as specified in each `@Mapping`.
 *
 * Unmapped fields are ignored due to `unmappedTargetPolicy = ReportingPolicy.IGNORE`.
 * Mapping for null properties are ignored due to `nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE`.
 *
 * This Mapper is automatically deployed by Spring, using components scanning.
 * The implementation of the methods in this interface is generated by MapStruct and should not be manually implemented.
 *
 * @author Ivan Bukrieiev
 * @since v1.0.0
 */
@Mapper(componentModel = MappingConstants.ComponentModel.SPRING,
      unmappedTargetPolicy = ReportingPolicy.IGNORE,
      nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE,
      uses = ProductMapper.class)
public interface OrderMapper {

   /**
    * Maps an `Order` entity to an `OrderDto`.
    *
    * @param entity The `Order` entity to be mapped.
    * @return The mapped `OrderDto`. If the source `Order` entity is null, return null.
    */
   @Mappings({
         @Mapping(target = "id", source = "entity.id"),
         @Mapping(target = "restaurantDto", source = "entity.restaurant"),
         @Mapping(target = "createdAt", source = "entity.createdAt"),
         @Mapping(target = "updateAt", source = "entity.updateAt"),
         @Mapping(target = "deliveryAddress", source = "entity.deliveryAddress"),
         @Mapping(target = "postalCode", source = "entity.postalCode"),
         @Mapping(target = "totalAmount", source = "entity.totalAmount"),
         @Mapping(target = "orderStatus", source = "entity.orderStatus"),
         @Mapping(target = "orderProductsDto", source = "entity.orderProducts")
   })
   OrderDto mapOrderToOrderDto(Order entity);

   /**
    * Maps an `Order` entity to an `OrderDto`.
    *
    * @param entity The `Order` entity to be mapped.
    * @return The mapped `OrderDto`. If the source `Order` entity is null, return null.
    */
   @Mappings({
         @Mapping(target = "id", source = "entity.id"),
         @Mapping(target = "quantity", source = "entity.quantity"),
         @Mapping(target = "productDto", source = "entity.product"),
   })
   OrderProductDto mapOrderProductToOrderProductDto(OrderProduct entity);

   /**
    * Maps an `OrderDto` to an `Order` entity.
    *
    * @param dto The `OrderDto` to be mapped.
    * @return The mapped `Order` entity. If the source `OrderDto` is null, return null.
    */
   @Mappings({
         @Mapping(target = "id", source = "dto.id"),
         @Mapping(target = "restaurant", source = "dto.restaurantDto"),
         @Mapping(target = "createdAt", source = "dto.createdAt"),
         @Mapping(target = "updateAt", source = "dto.updateAt"),
         @Mapping(target = "deliveryAddress", source = "dto.deliveryAddress"),
         @Mapping(target = "postalCode", source = "dto.postalCode"),
         @Mapping(target = "totalAmount", source = "dto.totalAmount"),
         @Mapping(target = "orderStatus", source = "dto.orderStatus"),
         @Mapping(target = "orderProducts", source = "dto.orderProductsDto")
   })
   Order mapOrderDtoToOrder(OrderDto dto);

   /**
    * Maps an `OrderProductDto` to an `OrderProduct` entity.
    *
    * @param dto The `OrderProductDto` entity to be mapped.
    * @return The mapped `OrderProduct` entity. If the source `OrderProductDto` is null, return null.
    */
   @Mappings({
         @Mapping(target = "id", source = "dto.id"),
         @Mapping(target = "quantity", source = "dto.quantity"),
         @Mapping(target = "product", source = "dto.productDto"),
   })
   OrderProduct mapOrderProductDtoToOrderProduct(OrderProductDto dto);

   /**
    * Maps a list of `Order` entities to a list of `OrderDto`.
    *
    * @param entities The list of `Order` entities to be mapped.
    * @return The list of mapped `OrderDto`. If the source list is null or empty, return an empty list.
    */
   List<OrderDto> mapOrdersToOrdersDto(List<Order> entities);

   /**
    * Maps a list of `OrderDto` to a list of `Order` entities.
    *
    * @param dtos The list of `OrderDto` to be mapped.
    * @return The list of mapped `Order` entities. If the source list is null or empty, return an empty list.
    */
   List<Order> mapOrdersDtoToOrders(List<OrderDto> dtos);

   /**
    * Maps a list of `OrderProduct` entities to a list of `OrderProductDto`.
    *
    * @param entities The list of `OrderProduct` entities to be mapped.
    * @return The list of mapped `OrderProductDto`. If the source list is null or empty, return an empty list.
    */
   List<OrderProductDto> mapOrderProductsToOrderProductsDto(List<OrderProduct> entities);

   /**
    * Maps a list of `OrderProductDto` to a list of `OrderProduct` entities.
    *
    * @param dtos The list of `OrderProductDto` to be mapped.
    * @return The list of mapped `OrderProduct` entities. If the source list is null or empty, return an empty list.
    */
   List<OrderProduct> mapOrderProductsDtoToOrderProducts(List<OrderProductDto> dtos);
}

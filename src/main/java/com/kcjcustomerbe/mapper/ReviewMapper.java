package com.kcjcustomerbe.mapper;

import com.kcjcustomerbe.dto.ReviewDto;
import com.kcjcustomerbe.dto.customer.CustomerDto;
import com.kcjcustomerbe.entity.Customer;
import com.kcjcustomerbe.entity.Review;
import org.mapstruct.*;
import org.mapstruct.factory.Mappers;

import java.util.List;

/**
 * Interface for mapping `Review` entity to its respective DTO and vice versa.
 * Uses MapStruct library for mapping, which generates the implementation at compile time.
 *
 * Mapping is performed by matching the `source` and `target` fields as specified in each `@Mapping`.
 *
 * Unmapped fields are ignored due to `unmappedTargetPolicy = ReportingPolicy.IGNORE`.
 * Mapping for null properties are ignored due to `nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE`.
 *
 * This Mapper is automatically deployed by Spring, using components scanning.
 * The implementation of the methods in this interface is generated by MapStruct and should not be manually implemented.
 *
 * @author Ivan Bukrieiev
 * @since v1.0.0
 */
@Mapper(componentModel = MappingConstants.ComponentModel.SPRING,
      unmappedTargetPolicy = ReportingPolicy.IGNORE,
      nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
public interface ReviewMapper {

   ReviewMapper INSTANCE = Mappers.getMapper(ReviewMapper.class);

   /**
    * Maps a `Review` entity to a `ReviewDto`.
    *
    * @param entity The `Review` entity to be mapped.
    * @return The mapped `ReviewDto`. If the source `Review` entity is null, return null.
    */
   @Mappings({
         @Mapping(target = "id", source = "id"),
         @Mapping(target = "restaurantDto", ignore = true),
         @Mapping(target = "customerDto", source = "customer"),
         @Mapping(target = "rating", source = "rating"),
         @Mapping(target = "comment", source = "comment"),
         @Mapping(target = "createdAt", source = "createdAt"),
         @Mapping(target = "updatedAt", source = "updatedAt")
   })
   ReviewDto mapReviewToReviewDto(Review entity);

   /**
    * Maps a list of `Review` entities to a list of `ReviewDto`.
    *
    * @param reviews The list of `Review` entities to be mapped.
    * @return The list of mapped `ReviewDto`. If the source list is null or empty, return an empty list.
    */
   List<ReviewDto> mapReviewsToReviewsDto(List<Review> reviews);

   @Mappings({
         @Mapping(target = "restaurant",source = "restaurantDto"),
         @Mapping(target = "customer", source = "customerDto"),
         @Mapping(target = "rating", source = "rating"),
         @Mapping(target = "comment", source = "comment"),
         @Mapping(target = "createdAt", expression = "java(java.time.LocalDateTime.now())")
   })
   Review mapReviewToCreateReviewDto(ReviewDto dto);

   @Mappings({
         @Mapping(target = "id", source = "id"),
         @Mapping(target = "restaurant", ignore = true),
         @Mapping(target = "customer", ignore = true),
         @Mapping(target = "rating", source = "rating"),
         @Mapping(target = "comment", source = "comment"),
         @Mapping(target = "createdAt", source = "createdAt"),
         @Mapping(target = "updatedAt", expression = "java(java.time.LocalDateTime.now())")
   })
   Review mapReviewToUpdateReviewDto(ReviewDto dto);

   @Mappings({
         @Mapping(target = "id", source = "id"),
         @Mapping(target = "firstName", source = "firstName"),
         @Mapping(target = "lastName", source = "lastName"),
         @Mapping(target = "email", ignore = true),
         @Mapping(target = "username", ignore = true),
         @Mapping(target = "phoneNumber", ignore = true),
         @Mapping(target = "address", ignore = true),
         @Mapping(target = "postalCode", ignore = true),
         @Mapping(target = "createdAt", ignore = true),
         @Mapping(target = "updatedAt", ignore = true),
         @Mapping(target = "role", ignore = true),
         @Mapping(target = "isBlocked", ignore = true),
         @Mapping(target = "ordersDto", ignore = true),
         @Mapping(target = "cartDto", ignore = true),
         @Mapping(target = "reviewsDto", ignore = true)
   })
   CustomerDto mapToCustomer(Customer entity);

   @Mappings({
         @Mapping(target = "id", source = "id"),
         @Mapping(target = "firstName", source = "firstName"),
         @Mapping(target = "lastName", source = "lastName"),
         @Mapping(target = "email", ignore = true),
         @Mapping(target = "username", ignore = true),
         @Mapping(target = "phoneNumber", ignore = true),
         @Mapping(target = "address", ignore = true),
         @Mapping(target = "postalCode", ignore = true),
         @Mapping(target = "createdAt", ignore = true),
         @Mapping(target = "updatedAt", ignore = true),
         @Mapping(target = "role", ignore = true),
         @Mapping(target = "isBlocked", ignore = true),
         @Mapping(target = "orders", ignore = true),
         @Mapping(target = "cart", ignore = true),
         @Mapping(target = "reviews", ignore = true)
   })
   Customer mapToCustomerDto(CustomerDto dto);
}

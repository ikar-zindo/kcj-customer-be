package com.kcj_customer_be.mapper;

import com.kcj_customer_be.dto.ProductDto;
import com.kcj_customer_be.dto.RestaurantDto;
import com.kcj_customer_be.entity.Product;
import com.kcj_customer_be.entity.Restaurant;
import org.mapstruct.*;

import java.util.List;

/**
 * Interface for mapping `Product` and `Restaurant` entities to their respective DTOs and vice versa.
 * Uses MapStruct library for mapping, which generates the implementation at compile time.
 * <p>
 * Mapping is performed by matching the `source` and `target` fields as specified in each `@Mapping`.
 * <p>
 * Unmapped fields are ignored due to `unmappedTargetPolicy = ReportingPolicy.IGNORE`.
 * Mapping for null properties are ignored due to `nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE`.
 * <p>
 * This Mapper is automatically deployed by Spring, using components scanning.
 * The implementation of the methods in this interface is generated by MapStruct and should not be manually implemented.
 *
 * @author Ivan Bukrieiev
 * @since v1.3.0
 */
@Mapper(componentModel = MappingConstants.ComponentModel.SPRING,
      unmappedTargetPolicy = ReportingPolicy.IGNORE,
      nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
public interface ProductMapper {

   /**
    * Maps a {@link Product} entity to a {@link ProductDto}.
    *
    * @param entity The {@link Product} entity to be mapped.
    * @return The mapped {@link ProductDto}. If the source {@link Product} entity is null, return null.
    */
   @Mapping(target = "id", source = "id")
   @Mapping(target = "name", source = "name")
   @Mapping(target = "description", source = "description")
   @Mapping(target = "price", source = "price"/*, qualifiedByName = "mapBigDecimalWithoutChanges"*/)
   @Mapping(target = "imageUrl", source = "imageUrl")
   @Mapping(target = "isAvailable", source = "isAvailable")
   @Mapping(target = "restaurantDto", source = "restaurant")
   ProductDto mapToProductDto(Product entity);

   /**
    * Maps a {@link Restaurant} entity to a {@link RestaurantDto}.
    *
    * @param entity The {@link Restaurant} entity to be mapped.
    * @return The mapped {@link RestaurantDto}. If the source {@link Restaurant} entity is null, return null.
    */
   @Mappings({
         @Mapping(target = "id", source = "id"),
         @Mapping(target = "address", source = "address"),
         @Mapping(target = "phoneNumber", source = "phoneNumber"),
         @Mapping(target = "openingHours", source = "openingHours"),
         @Mapping(target = "cuisineType", source = "cuisineType"),
         @Mapping(target = "description", source = "description"),
         @Mapping(target = "isOpen", source = "isOpen"),
         @Mapping(target = "productsDto", ignore = true),
         @Mapping(target = "reviewsDto", ignore = true),
         @Mapping(target = "ordersDto", ignore = true)

   })
   RestaurantDto mapToRestaurantDto(Restaurant entity);

   /**
    * Maps a {@link ProductDto} to a {@link Product} entity.
    *
    * @param dto The {@link ProductDto} to be mapped.
    * @return The mapped {@link Product} entity. If the source {@link ProductDto} is null, return null.
    */
   @Mappings({
         @Mapping(target = "id", source = "id"),
         @Mapping(target = "name", source = "name"),
         @Mapping(target = "description", source = "description"),
         @Mapping(target = "price", source = "price"),
         @Mapping(target = "imageUrl", source = "imageUrl"),
         @Mapping(target = "isAvailable", source = "isAvailable"),
         @Mapping(target = "restaurant", source = "restaurantDto")
   })
   Product mapToProduct(ProductDto dto);

   /**
    * Maps a list of {@link Product} entities to a list of {@link ProductDto}.
    *
    * @param entities The list of {@link Product} entities to be mapped.
    * @return The list of mapped {@link ProductDto}. If the source list is null or empty, return an empty list.
    */
   List<ProductDto> mapToProductsDto(List<Product> entities);

   /**
    * Maps a list of {@link ProductDto} to a list of {@link Product} entities.
    *
    * @param dtos The list of {@link ProductDto} to be mapped.
    * @return The list of mapped {@link Product} entities. If the source list is null or empty, return an empty list.
    */
   List<Product> mapToProducts(List<ProductDto> dtos);
}

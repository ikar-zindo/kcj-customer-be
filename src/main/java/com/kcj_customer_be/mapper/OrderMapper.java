package com.kcj_customer_be.mapper;

import com.kcj_customer_be.dto.OrderDto;
import com.kcj_customer_be.dto.OrderProductDto;
import com.kcj_customer_be.entity.Order;
import com.kcj_customer_be.entity.OrderProduct;
import org.mapstruct.*;

import java.util.List;

/**
 * Interface for mapping `Order` and `OrderProduct` entities to their respective DTOs and vice versa.
 * Uses MapStruct library for mapping, which generates the implementation at compile time.
 * <p>
 * Mapping is performed by matching the `source` and `target` fields as specified in each `@Mapping`.
 * <p>
 * Unmapped fields are ignored due to `unmappedTargetPolicy = ReportingPolicy.IGNORE`.
 * Mapping for null properties are ignored due to `nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE`.
 * <p>
 * This Mapper is automatically deployed by Spring, using components scanning.
 * The implementation of the methods in this interface is generated by MapStruct and should not be manually implemented.
 *
 * @author Ivan Bukrieiev
 * @see ProductMapper
 * @since v1.3.0
 */
@Mapper(componentModel = MappingConstants.ComponentModel.SPRING,
      unmappedTargetPolicy = ReportingPolicy.IGNORE,
      nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE,
      uses = ProductMapper.class)
public interface OrderMapper {

   /**
    * Maps an {@link Order} entity to an {@link OrderDto}.
    *
    * @param entity The {@link Order} entity to be mapped.
    * @return The mapped {@link OrderDto}. If the source {@link Order} entity is null, return null.
    */
   @Mappings({
         @Mapping(target = "id", source = "id"),
         @Mapping(target = "customerDto", ignore = true),
         @Mapping(target = "restaurantDto", source = "restaurant"),
         @Mapping(target = "createdAt", expression = "java(java.time.LocalDateTime.now())"),
         @Mapping(target = "updateAt", source = "updateAt"),
         @Mapping(target = "deliveryAddress", source = "deliveryAddress"),
         @Mapping(target = "postalCode", source = "postalCode"),
         @Mapping(target = "totalAmount", source = "totalAmount"),
         @Mapping(target = "orderStatus", source = "orderStatus"),
         @Mapping(target = "orderProductsDto", source = "orderProducts")
   })
   OrderDto mapToOrderDto(Order entity);

   /**
    * Maps an {@link Order} entity to an {@link OrderDto}.
    *
    * @param entity The {@link Order} entity to be mapped.
    * @return The mapped {@link OrderDto}. If the source {@link Order} entity is null, return null.
    */
   @Mappings({
         @Mapping(target = "id", source = "id"),
         @Mapping(target = "quantity", source = "quantity"),
         @Mapping(target = "orderDto", ignore = true),
         @Mapping(target = "productDto", source = "product")
   })
   OrderProductDto mapToOrderProductDto(OrderProduct entity);

   /**
    * Maps an {@link OrderDto} to an {@link Order} entity.
    *
    * @param dto The {@link OrderDto} to be mapped.
    * @return The mapped {@link Order} entity. If the source {@link OrderDto} is null, return null.
    */
   @Mappings({
         @Mapping(target = "id", source = "id"),
         @Mapping(target = "customer", source = "customerDto"),
         @Mapping(target = "restaurant", source = "restaurantDto"),
         @Mapping(target = "createdAt", expression = "java(java.time.LocalDateTime.now())"),
         @Mapping(target = "updateAt", source = "updateAt"),
         @Mapping(target = "deliveryAddress", source = "deliveryAddress"),
         @Mapping(target = "postalCode", source = "postalCode"),
         @Mapping(target = "totalAmount", source = "totalAmount"),
         @Mapping(target = "orderStatus", source = "orderStatus"),
         @Mapping(target = "orderProducts", source = "orderProductsDto")
   })
   Order mapToOrder(OrderDto dto);

   /**
    * Maps an {@link OrderProductDto} to an {@link OrderProduct} entity.
    *
    * @param dto The {@link OrderProductDto} entity to be mapped.
    * @return The mapped {@link OrderProduct} entity. If the source {@link OrderProductDto} is null, return null.
    */
   @Mappings({
         @Mapping(target = "id", source = "id"),
         @Mapping(target = "order", ignore = true),
         @Mapping(target = "quantity", source = "quantity"),
         @Mapping(target = "product", source = "productDto")
   })
   OrderProduct mapToOrderProduct(OrderProductDto dto);

   /**
    * Maps a list of {@link Order} entities to a list of {@link OrderDto}.
    *
    * @param entities The list of {@link Order} entities to be mapped.
    * @return The list of mapped {@link OrderDto}. If the source list is null or empty, return an empty list.
    */
   List<OrderDto> mapToOrdersDto(List<Order> entities);

   /**
    * Maps a list of {@link OrderDto} to a list of {@link Order} entities.
    *
    * @param dtos The list of {@link OrderDto} to be mapped.
    * @return The list of mapped {@link Order} entities. If the source list is null or empty, return an empty list.
    */
   List<Order> mapDtoToOrders(List<OrderDto> dtos);

   /**
    * Maps a list of {@link OrderProduct} entities to a list of {@link OrderProductDto}.
    *
    * @param entities The list of {@link OrderProduct} entities to be mapped.
    * @return The list of mapped {@link OrderProductDto}. If the source list is null or empty, return an empty list.
    */
   List<OrderProductDto> mapToOrderProductsDto(List<OrderProduct> entities);

   /**
    * Maps a list of {@link OrderProductDto} to a list of {@link OrderProduct} entities.
    *
    * @param dtos The list of {@link OrderProductDto} to be mapped.
    * @return The list of mapped {@link OrderProduct} entities. If the source list is null or empty, return an empty list.
    */
   List<OrderProduct> mapToOrderProducts(List<OrderProductDto> dtos);
}

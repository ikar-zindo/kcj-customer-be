package com.kcj_customer_be.mapper;

import com.kcj_customer_be.dto.ReviewDto;
import com.kcj_customer_be.entity.Review;
import org.mapstruct.*;

import java.util.List;

/**
 * Interface for mapping `Review` entity to its respective DTO and vice versa.
 * Uses MapStruct library for mapping, which generates the implementation at compile time.
 * <p>
 * Mapping is performed by matching the `source` and `target` fields as specified in each `@Mapping`.
 * <p>
 * Unmapped fields are ignored due to `unmappedTargetPolicy = ReportingPolicy.IGNORE`.
 * Mapping for null properties are ignored due to `nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE`.
 * <p>
 * This Mapper is automatically deployed by Spring, using components scanning.
 * The implementation of the methods in this interface is generated by MapStruct and should not be manually implemented.
 *
 * @author Ivan Bukrieiev
 * @since v1.3.0
 */
@Mapper(componentModel = MappingConstants.ComponentModel.SPRING,
      unmappedTargetPolicy = ReportingPolicy.IGNORE,
      nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE,
      uses = {CustomerMapper.class})
public interface ReviewMapper {

   /**
    * Mapping for creating a new comment
    * Maps a {@link ReviewDto} to a {@link Review} entity.
    *
    * @param dto The {@link ReviewDto} to be mapped.
    * @return The mapped {@link Review} entity. If the source {@link ReviewDto} is null, return null.
    */
   @Mappings({
         @Mapping(target = "restaurant", source = "restaurantDto"),
         @Mapping(target = "customer", source = "customerDto"),
         @Mapping(target = "rating", source = "rating"),
         @Mapping(target = "comment", source = "comment"),
         @Mapping(target = "createdAt", expression = "java(java.time.LocalDateTime.now())")
   })
   Review mapReviewToCreateReviewDto(ReviewDto dto);

   /**
    * Mapping for changing comments
    * Maps a {@link ReviewDto} to a `Review` entity.
    *
    * @param dto The {@link ReviewDto} to be mapped.
    * @return The mapped {@link Review} entity. If the source {@link ReviewDto} is null, return null.
    */
   @Mappings({
         @Mapping(target = "id", source = "id"),
         @Mapping(target = "restaurant", ignore = true),
         @Mapping(target = "customer", ignore = true),
         @Mapping(target = "rating", source = "rating"),
         @Mapping(target = "comment", source = "comment"),
         @Mapping(target = "createdAt", source = "createdAt"),
         @Mapping(target = "updatedAt", expression = "java(java.time.LocalDateTime.now())")
   })
   Review mapReviewToUpdateReviewDto(ReviewDto dto);

   /**
    * Maps a {@link Review} entity to a {@link ReviewDto}.
    *
    * @param entity The {@link Review} entity to be mapped.
    * @return The mapped {@link ReviewDto}. If the source {@link Review} entity is null, return null.
    */
   @Named("mapToReviewDto")
   @Mappings({
         @Mapping(target = "id", source = "id"),
         @Mapping(target = "restaurantDto", ignore = true),
         @Mapping(target = "customerDto", source = "customer", qualifiedByName = "mapToCustomerDtoShort"),
         @Mapping(target = "rating", source = "rating"),
         @Mapping(target = "comment", source = "comment"),
         @Mapping(target = "createdAt", source = "createdAt"),
         @Mapping(target = "updatedAt", source = "updatedAt")
   })
   ReviewDto mapToReviewDto(Review entity);

   /**
    * Maps a {@link ReviewDto} to a {@link Review} entity.
    *
    * @param dto The {@link ReviewDto} to be mapped.
    * @return The mapped {@link Review} entity. If the source {@link ReviewDto} is null, return null.
    */
   @Named("mapToReview")
   @Mappings({
         @Mapping(target = "id", source = "id"),
         @Mapping(target = "restaurant", ignore = true),
         @Mapping(target = "customer", source = "customerDto", qualifiedByName = "mapToCustomerShort"),
         @Mapping(target = "rating", source = "rating"),
         @Mapping(target = "comment", source = "comment"),
         @Mapping(target = "createdAt", source = "createdAt"),
         @Mapping(target = "updatedAt", source = "updatedAt")
   })
   Review mapToReview(ReviewDto dto);

   /**
    * Maps a list of {@link Review} entities to a list of {@link ReviewDto}.
    *
    * @param entities The list of {@link Review} entities to be mapped.
    * @return The list of mapped {@link ReviewDto}. If the source list is null or empty, return an empty list.
    */
   @Named("mapToReviewsDto")
   @IterableMapping(qualifiedByName = "mapToReviewDto")
   List<ReviewDto> mapToReviewsDto(List<Review> entities);

   /**
    * Maps a list of {@link Review} entities to a list of {@link ReviewDto}.
    *
    * @param dtos The list of {@link ReviewDto} dto to be mapped.
    * @return The list of mapped {@link Review}. If the source list is null or empty, return an empty list.
    */
   @IterableMapping(qualifiedByName = "mapToReview")
   List<Review> mapToReviews(List<ReviewDto> dtos);
}

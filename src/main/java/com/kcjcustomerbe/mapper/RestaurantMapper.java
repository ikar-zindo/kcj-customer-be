package com.kcjcustomerbe.mapper;

import com.kcjcustomerbe.dto.RestaurantDto;
import com.kcjcustomerbe.entity.Restaurant;
import org.mapstruct.*;

import java.util.List;

/**
 * Interface for mapping `Restaurant` entity to its respective DTO and vice versa.
 * Uses MapStruct library for mapping, which generates the implementation at compile time.
 * <p>
 * Mapping is performed by matching the `source` and `target` fields as specified in each `@Mapping`.
 * <p>
 * Unmapped fields are ignored due to `unmappedTargetPolicy = ReportingPolicy.IGNORE`.
 * Mapping for null properties are ignored due to `nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE`.
 * <p>
 * This Mapper is automatically deployed by Spring, using components scanning.
 * The implementation of the methods in this interface is generated by MapStruct and should not be manually implemented.
 *
 * @see ReviewMapper
 *
 * @author Ivan Bukrieiev
 * @since v1.0.0
 */
@Mapper(componentModel = MappingConstants.ComponentModel.SPRING,
      unmappedTargetPolicy = ReportingPolicy.IGNORE,
      nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE,
      uses = {ReviewMapper.class})
public interface RestaurantMapper {

   /**
    * Maps a `Restaurant` entity to a `RestaurantDto`.
    *
    * @param entity The `Restaurant` entity to be mapped.
    * @return The mapped `RestaurantDto`. If the source `Restaurant` entity is null, return null.
    */
   @Mappings({
         @Mapping(target = "id", source = "id"),
         @Mapping(target = "name", source = "name"),
         @Mapping(target = "address", source = "address"),
         @Mapping(target = "phoneNumber", source = "phoneNumber"),
         @Mapping(target = "openingHours", source = "openingHours"),
         @Mapping(target = "cuisineType", source = "cuisineType"),
         @Mapping(target = "description", source = "description"),
         @Mapping(target = "socialMediaLinks", source = "socialMediaLinks"),
         @Mapping(target = "isOpen", source = "isOpen"),
         @Mapping(target = "productsDto", source = "products"),
         @Mapping(target = "reviewsDto", source = "reviews"),
   })
   RestaurantDto mapToRestaurantDto(Restaurant entity);

   /**
    * Maps an `RestaurantDto` to an `Restaurant` entity.
    *
    * @param dto The `RestaurantDto` to be mapped.
    * @return The mapped `Restaurant` entity. If the source `RestaurantDto` is null, return null.
    */
   @Mappings({
         @Mapping(target = "id", source = "id"),
         @Mapping(target = "name", source = "name"),
         @Mapping(target = "address", source = "address"),
         @Mapping(target = "phoneNumber", source = "phoneNumber"),
         @Mapping(target = "openingHours", source = "openingHours"),
         @Mapping(target = "cuisineType", source = "cuisineType"),
         @Mapping(target = "description", source = "description"),
         @Mapping(target = "socialMediaLinks", source = "socialMediaLinks"),
         @Mapping(target = "isOpen", source = "isOpen"),
         @Mapping(target = "products", source = "productsDto"),
         @Mapping(target = "reviews", source = "reviewsDto"),
   })
   Restaurant mapToRestaurant(RestaurantDto dto);

   /**
    * Maps a list of `Restaurant` entities to a list of `RestaurantDto`.
    *
    * @param entities The list of `Restaurant` entities to be mapped.
    * @return The list of mapped `RestaurantDto`. If the source list is null or empty, return an empty list.
    */
   List<RestaurantDto> mapRestaurantsToRestaurantsDto(List<Restaurant> entities);
}